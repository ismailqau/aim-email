# Development environment with hot reload
# Use: docker-compose -f docker-compose.dev.yml up

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: email-marketing-db-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: email_marketing_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: email-marketing-redis-dev
    restart: unless-stopped
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # Development API with hot reload
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: api-dev
    container_name: email-marketing-api-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/email_marketing_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-key-change-in-production
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-SG.dev-key}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-dev-gemini-key}
    ports:
      - '3001:3001'
    volumes:
      - .:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    command: npm run dev --filter=api

  # Development Web with hot reload
  web-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: web-dev
    container_name: email-marketing-web-dev
    restart: unless-stopped
    depends_on:
      - api-dev
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
    ports:
      - '3000:3000'
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev --filter=web

volumes:
  postgres_dev_data:
    driver: local
