name: Lighthouse CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lhci:
    name: Lighthouse CI
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: email_marketing_lighthouse
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/email_marketing_lighthouse" >> .env
          echo "JWT_SECRET=lighthouse-test-secret" >> .env
          echo "SENDGRID_API_KEY=SG.test-key" >> .env
          echo "GEMINI_API_KEY=test-gemini-key" >> .env
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env
          echo "NEXTAUTH_SECRET=lighthouse-test-secret" >> .env
          echo "NEXT_PUBLIC_API_URL=http://localhost:3001/api/v1" >> .env
          echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> .env
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/email_marketing_lighthouse
          JWT_SECRET: lighthouse-test-secret
          SENDGRID_API_KEY: SG.test-key
          GEMINI_API_KEY: test-gemini-key
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: lighthouse-test-secret
          NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
          NEXT_PUBLIC_APP_URL: http://localhost:3000

      - name: Generate Prisma Client
        run: npm run db:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/email_marketing_lighthouse

      - name: Setup database
        run: |
          # For CI, we can use either migrate deploy or db push
          # Using db push for CI as it's more robust for fresh databases
          npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/email_marketing_lighthouse

      - name: Build applications
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/email_marketing_lighthouse
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: lighthouse-test-secret
          NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
          NEXT_PUBLIC_APP_URL: http://localhost:3000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/email_marketing_lighthouse
          JWT_SECRET: lighthouse-test-secret
          SENDGRID_API_KEY: SG.test-key
          GEMINI_API_KEY: test-gemini-key
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: lighthouse-test-secret
          NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
          NEXT_PUBLIC_APP_URL: http://localhost:3000
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/
