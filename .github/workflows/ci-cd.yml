name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: email_marketing_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install --no-save @microsoft/eslint-formatter-sarif

      - name: Setup environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/email_marketing_test" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "JWT_SECRET=test-secret-key-for-ci" >> .env
          echo "SENDGRID_API_KEY=SG.test-key" >> .env
          echo "GEMINI_API_KEY=test-gemini-key" >> .env
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/email_marketing_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci
          SENDGRID_API_KEY: SG.test-key
          GEMINI_API_KEY: test-gemini-key

      - name: Generate Prisma Client
        run: npm run db:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/email_marketing_test

      - name: Run database migrations
        run: |
          # For CI, we can use either migrate deploy or db push
          # Using db push for CI as it's more robust for fresh databases
          npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/email_marketing_test

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Generate Prisma client
        run: npx prisma generate --schema=packages/db/prisma/schema.prisma

      - name: Build applications
        run: npm run build

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          CI: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/email_marketing_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci
          SENDGRID_API_KEY: SG.test-key
          GEMINI_API_KEY: test-gemini-key

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

      - name: Generate test report
        if: always()
        run: |
          mkdir -p reports/test-results
          npm run test:report || true

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            reports/
            coverage/
          retention-days: 30

      - name: Cache build outputs
        if: matrix.node-version == 18
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            apps/*/dist
            apps/*/.next
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  # Job 2: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: snyk-results.json

  # Job 3: Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install --no-save @microsoft/eslint-formatter-sarif

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'

      - name: Run ESLint with SARIF output
        run: |
          npx eslint . --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true

      - name: Upload ESLint results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

      - name: Dependency vulnerability scan
        run: |
          # Run audit and capture results
          npm audit --audit-level=high --json > audit-results.json || echo "Vulnerabilities found"

          # Try to fix automatically fixable issues
          npm audit fix --dry-run > audit-fix-preview.txt || true

          # Generate human-readable summary
          echo "Security Audit Summary:" > audit-summary.txt
          echo "Generated at: $(date)" >> audit-summary.txt
          echo "" >> audit-summary.txt

          # Check if there are any high/critical vulnerabilities
          if npm audit --audit-level=high --json | grep -q '"vulnerabilities"'; then
            echo "⚠️  High/Critical vulnerabilities found. Review required." >> audit-summary.txt
            npm audit --audit-level=high >> audit-summary.txt || true
          else
            echo "✅ No high/critical vulnerabilities found." >> audit-summary.txt
          fi

          echo "Dependency scan completed"

      - name: TypeScript strict checks
        run: |
          npx tsc --noEmit --strict --project tsconfig.json
        continue-on-error: true

      - name: Generate comprehensive code quality reports
        run: |
          mkdir -p reports/quality

          # Generate code duplication report with jscpd
          npx jscpd --output reports/quality/duplication --reporters html,json apps/ packages/ || true

          # Generate basic complexity metrics using TypeScript compiler
          find apps/ packages/ -name "*.ts" -o -name "*.tsx" | wc -l > reports/quality/typescript-files.txt
          find apps/ packages/ -name "*.js" -o -name "*.jsx" | wc -l > reports/quality/javascript-files.txt

          # Generate TypeScript complexity metrics
          npx tsc --noEmit --listFiles apps/ packages/ 2>&1 | wc -l > reports/quality/ts-file-count.txt || true

          # Generate bundle analysis
          npm run build 2>&1 | tee reports/quality/build-output.txt || true

          # Generate dependency analysis
          npx madge --circular --extensions ts,tsx,js,jsx apps/ packages/ > reports/quality/circular-deps.txt || true
          npx madge --summary apps/ packages/ > reports/quality/dependency-summary.txt || true

          # Generate code metrics summary
          echo "Code Quality Analysis Complete" > reports/quality/summary.txt
          echo "Generated at: $(date)" >> reports/quality/summary.txt
          echo "" >> reports/quality/summary.txt
          echo "Reports generated:" >> reports/quality/summary.txt
          echo "- Code duplication analysis (jscpd)" >> reports/quality/summary.txt
          echo "- File count metrics" >> reports/quality/summary.txt
          echo "- TypeScript file analysis" >> reports/quality/summary.txt
          echo "- Circular dependency analysis" >> reports/quality/summary.txt
          echo "- Dependency summary" >> reports/quality/summary.txt
          echo "- Build output analysis" >> reports/quality/summary.txt

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            reports/quality/
            audit-results.json
            audit-fix-preview.txt
            audit-summary.txt
            eslint-results.sarif

  # Job 4: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Generate Prisma client
        run: npx prisma generate --schema=packages/db/prisma/schema.prisma

      - name: Build applications
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: .lighthouseci/

  # Job 5: Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        service: [api, web]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for ${{ matrix.service }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.service }} Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}

      - name: Test ${{ matrix.service }} container
        run: |
          docker run --rm --name test-${{ matrix.service }} -d \
            -p ${{ matrix.service == 'api' && '3001:3001' || '3000:3000' }} \
            ghcr.io/${{ github.repository }}-${{ matrix.service }}:${{ github.ref_name }}-${{ github.sha }}

          # Wait for container to start
          sleep 30

          # Test health endpoint for API
          if [ "${{ matrix.service }}" = "api" ]; then
            curl -f http://localhost:3001/api/v1/health || exit 1
          fi

          # Test web endpoint
          if [ "${{ matrix.service }}" = "web" ]; then
            curl -f http://localhost:3000 || exit 1
          fi

          # Clean up
          docker stop test-${{ matrix.service }}

  # Job 6: Docker Compose Integration Test
  docker-compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/email_marketing" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "JWT_SECRET=test-secret-key-for-docker" >> .env
          echo "SENDGRID_API_KEY=SG.test-key" >> .env
          echo "GEMINI_API_KEY=test-gemini-key" >> .env
          echo "FRONTEND_URL=http://localhost:3000" >> .env

      - name: Start services with Docker Compose
        run: docker-compose up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to start..."
          timeout 300 bash -c 'until docker-compose ps | grep -q "(healthy)"; do sleep 5; done'
          docker-compose ps

      - name: Test API health endpoint
        run: |
          curl -f http://localhost:3001/api/v1/health
          echo "API health check passed"

      - name: Test web application
        run: |
          curl -f http://localhost:3000
          echo "Web application check passed"

      - name: Run integration tests against Docker services
        run: |
          # Add any integration tests here
          echo "Integration tests would run here"

      - name: Collect service logs
        if: always()
        run: |
          mkdir -p logs
          docker-compose logs api > logs/api.log
          docker-compose logs web > logs/web.log
          docker-compose logs postgres > logs/postgres.log
          docker-compose logs redis > logs/redis.log

      - name: Upload service logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-logs
          path: logs/

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Job 7: Deployment Preparation
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality, docker-compose-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate version
        id: version
        run: |
          VERSION=$(date +%Y.%m.%d)-${GITHUB_SHA::8}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create release notes
        run: |
          mkdir -p deployment/
          cat > deployment/release-notes.md << EOF
          # Release ${{ steps.version.outputs.version }}

          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Workflow:** ${{ github.run_id }}

          ## Changes in this release
          $(git log --oneline -10 --pretty=format:"- %s")

          ## Test Results
          - ✅ Unit Tests: Passed
          - ✅ Integration Tests: Passed
          - ✅ Security Scan: Completed
          - ✅ Code Quality: Analyzed

          EOF

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment/

  # Job 8: Notify
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs:
      [
        build-and-test,
        security-scan,
        code-quality,
        docker-build,
        docker-compose-test,
      ]
    if: always()

    steps:
      - name: Notify success
        if: needs.build-and-test.result == 'success'
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

      - name: Notify failure
        if: needs.build-and-test.result == 'failure'
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          exit 1
