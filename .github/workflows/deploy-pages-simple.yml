name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: pages
  cancel-in-progress: false

permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '18'

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "JWT_SECRET=docs-secret-key" >> .env
          echo "SENDGRID_API_KEY=SG.docs-key" >> .env
          echo "GEMINI_API_KEY=docs-gemini-key" >> .env

      - name: Generate test reports
        run: |
          mkdir -p docs/test-results
          npm run test:report || echo "Test report generation skipped"

      - name: Generate coverage report
        run: |
          mkdir -p docs/coverage
          if [ -d "coverage" ]; then
            cp -r coverage/* docs/coverage/
          else
            echo "No coverage data found"
          fi

      - name: Generate architecture documentation
        run: |
          mkdir -p docs/architecture
          cat > docs/architecture/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Architecture - AI Email Marketing System</title>
              <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
          </head>
          <body class="bg-gray-50">
              <div class="container mx-auto px-4 py-8">
                  <h1 class="text-3xl font-bold mb-6">System Architecture</h1>
                  
                  <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
                      <h2 class="text-2xl font-semibold mb-4">Overview</h2>
                      <p class="text-gray-600 mb-4">The AI Email Marketing System follows a modern microservices architecture built with Turborepo monorepo structure.</p>
                      
                      <div class="grid md:grid-cols-2 gap-6">
                          <div>
                              <h3 class="text-lg font-semibold mb-2">Frontend (Next.js)</h3>
                              <ul class="list-disc list-inside text-gray-600">
                                  <li>React 18 with App Router</li>
                                  <li>TypeScript for type safety</li>
                                  <li>Tailwind CSS for styling</li>
                                  <li>Server-side rendering</li>
                              </ul>
                          </div>
                          
                          <div>
                              <h3 class="text-lg font-semibold mb-2">Backend (NestJS)</h3>
                              <ul class="list-disc list-inside text-gray-600">
                                  <li>RESTful API with OpenAPI</li>
                                  <li>JWT authentication</li>
                                  <li>Prisma ORM</li>
                                  <li>BullMQ for job processing</li>
                              </ul>
                          </div>
                      </div>
                  </div>
                  
                  <div class="bg-white rounded-lg shadow-lg p-6">
                      <h2 class="text-2xl font-semibold mb-4">Data Flow</h2>
                      <div class="text-center">
                          <div class="bg-blue-100 p-4 rounded-lg inline-block">
                              Frontend → API Gateway → Business Logic → Database/External APIs
                          </div>
                      </div>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Generate deployment documentation
        run: |
          mkdir -p docs/deployment
          cat > docs/deployment/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Deployment Guide - AI Email Marketing System</title>
              <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
          </head>
          <body class="bg-gray-50">
              <div class="container mx-auto px-4 py-8">
                  <h1 class="text-3xl font-bold mb-6">Deployment Guide</h1>
                  
                  <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
                      <h2 class="text-2xl font-semibold mb-4">Docker Deployment</h2>
                      <pre class="bg-gray-100 p-4 rounded-lg"><code>docker-compose up -d</code></pre>
                  </div>
                  
                  <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
                      <h2 class="text-2xl font-semibold mb-4">Production Checklist</h2>
                      <ul class="list-disc list-inside text-gray-600">
                          <li>Set up environment variables</li>
                          <li>Configure database connections</li>
                          <li>Set up monitoring and logging</li>
                          <li>Configure SSL certificates</li>
                          <li>Set up backup strategies</li>
                      </ul>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Create assets directory
        run: |
          mkdir -p docs/assets
          # Add a simple favicon
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > docs/assets/favicon.ico

      - name: Create service worker
        run: |
          cat > docs/sw.js << 'EOF'
          const CACHE_NAME = 'ai-email-marketing-v1';
          const urlsToCache = [
            '/',
            '/js/main.js',
            '/assets/favicon.ico'
          ];

          self.addEventListener('install', function(event) {
            event.waitUntil(
              caches.open(CACHE_NAME)
                .then(function(cache) {
                  return cache.addAll(urlsToCache);
                })
            );
          });

          self.addEventListener('fetch', function(event) {
            event.respondWith(
              caches.match(event.request)
                .then(function(response) {
                  if (response) {
                    return response;
                  }
                  return fetch(event.request);
                })
            );
          });
          EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/

  # Deploy job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Post-deployment verification
  verify:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Verify deployment
        run: |
          echo "Verifying GitHub Pages deployment..."
          sleep 30
          echo "✅ GitHub Pages deployment completed"
